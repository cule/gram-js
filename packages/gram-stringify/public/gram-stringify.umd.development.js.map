{"version":3,"file":"gram-stringify.umd.development.js","sources":["../src/gram-stringify.ts","../src/gram-stringify-plugin.ts"],"sourcesContent":["import {\n  GramNode,\n  GramEdge,\n  GramRecord,\n  GramLiteral,\n  GramPath,\n  GramRecordValue,\n  isLiteral,\n  isGramNode,\n  isGramEdge,\n  GramPathlike,\n  GramPathSeq,\n  isGramUnit,\n} from '@gram-data/gram-ast';\n\nconst isEmpty = (o: any) => Object.keys(o).length === 0;\n\nconst toStringLiteral = (l: GramLiteral): string => {\n  switch (l.type) {\n    case 'integer':\n      return l.value;\n    case 'string':\n      return `\\`${l.value}\\``;\n    case 'tagged':\n      return `${l.tag}\\`${l.value}\\``;\n    default:\n      return `<ERROR, can't stringify literals of type ${l.type}>`;\n  }\n};\n\nconst toStringValue = (v: GramRecordValue) => {\n  if (Array.isArray(v)) {\n    return `[${v.map(l => toStringLiteral(l)).join(',')}]`;\n  } else if (isLiteral(v)) {\n    return toStringLiteral(v);\n  } else {\n    return recordToString(v);\n  }\n};\n\nconst recordToString = (record: GramRecord): string => {\n  const fields = Object.entries(record).map(\n    ([key, value], i) => `${i > 0 ? ',' : ''}${key}:${toStringValue(value)}`\n  );\n  return `{${fields.join('')}}`;\n};\n\nconst elementContentToString = (ast: GramPathlike): string => {\n  const idString = ast.id || '';\n  const labelsString =\n    ast.labels && ast.labels.length > 0 ? ':' + ast.labels.join(':') : '';\n  const recordString =\n    ast.record && !isEmpty(ast.record) ? recordToString(ast.record) : '';\n  return `${idString}${labelsString}${\n    recordString.length > 0 ? ' ' : ''\n  }${recordString}`;\n};\n\nconst nodeToString = (ast: GramNode): string =>\n  `(${elementContentToString(ast)})`;\n\nconst edgeToString = (ast: GramEdge): string => {\n  const left = ast.relation === 'left' ? '<-' : '-';\n  const right = ast.relation === 'right' ? '->' : '-';\n\n  const leftNode = isGramNode(ast.children[0])\n    ? nodeToString(ast.children[0])\n    : edgeToString(ast.children[0]);\n  const rightNode = isGramNode(ast.children[1])\n    ? nodeToString(ast.children[1])\n    : edgeToString(ast.children[1]);\n  const content = elementContentToString(ast);\n  const boxedContent = content.length > 0 ? `[${content}]` : '';\n\n  return `${leftNode}${left}${boxedContent}${right}${rightNode}`;\n};\n\nconst pathToString = (ast: GramPath): string => {\n  const pathContent = elementContentToString(ast);\n  const pathChild = ast.children[0];\n  const pathExpression = pathChild\n    ? `${\n        isGramNode(pathChild)\n          ? nodeToString(pathChild)\n          : isGramEdge(pathChild)\n          ? edgeToString(pathChild)\n          : isGramUnit(pathChild)\n          ? ''\n          : pathToString(pathChild)\n      }`\n    : '';\n  if (pathContent.length > 0) {\n    return `[${pathContent} ${pathExpression}]`;\n  } else {\n    return pathExpression;\n  }\n};\n\nconst stringify = (ast: GramPathlike | GramPathSeq): string => {\n  const tokens: Array<string> = [];\n  switch (ast.type) {\n    case 'seq':\n      const paths = ast.children as GramPath[];\n      return paths.map((path: GramPath) => stringify(path)).join('\\n');\n    case 'path':\n      return pathToString(ast as GramPath);\n    case 'node':\n      return nodeToString(ast as GramNode);\n    case 'edge':\n      return edgeToString(ast as GramEdge);\n    default:\n      console.error(`Impossible:`, typeof ast);\n  }\n\n  return tokens.join('');\n};\n\nexport default stringify;\n","import { CompilerFunction, Plugin } from 'unified';\nimport { Node as UnistNode } from 'unist';\n// import {VFile} from 'vfile'\n\nimport { isGramPathlike } from '@gram-data/gram-ast';\n\nimport stringify from './gram-stringify';\n\nconst stringifyCompiler: CompilerFunction = (element: UnistNode) => {\n  if (isGramPathlike(element)) {\n    return stringify(element);\n  } else {\n    return `Don't know how to stringify \"${element.type}\" nodes`;\n  }\n};\n\nconst gramStringifyPlugin: Plugin = function() {\n  this.Compiler = stringifyCompiler;\n};\n\nexport default gramStringifyPlugin;\n"],"names":["isEmpty","o","Object","keys","length","toStringLiteral","l","type","value","tag","toStringValue","v","Array","isArray","map","join","isLiteral","recordToString","record","fields","entries","i","key","elementContentToString","ast","idString","id","labelsString","labels","recordString","nodeToString","edgeToString","left","relation","right","leftNode","isGramNode","children","rightNode","content","boxedContent","pathToString","pathContent","pathChild","pathExpression","isGramEdge","isGramUnit","stringify","tokens","paths","path","console","error","stringifyCompiler","element","isGramPathlike","gramStringifyPlugin","Compiler"],"mappings":"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"}